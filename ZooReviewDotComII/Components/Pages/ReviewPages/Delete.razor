@page "/reviews/delete"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Review</h2>
    <hr />
    @if (review is null)
    {
    <p><em>Loading...</em></p>
    }
    else {
    <dl class="row">
        <dt class="col-sm-2">UserId</dt>
        <dd class="col-sm-10">@review.Username</dd>
    </dl>
    <dl class="row">
        <dt class="col-sm-2">Rating</dt>
        <dd class="col-sm-10">@review.Rating</dd>
    </dl>
    <dl class="row">
        <dt class="col-sm-2">Content</dt>
        <dd class="col-sm-10">@review.Content</dd>
    </dl>
    <dl class="row">
        <dt class="col-sm-2">DateReviewed</dt>
        <dd class="col-sm-10">@review.DateReviewed</dd>
    </dl>
    <EditForm method="post" Model="review" OnValidSubmit="DeleteReview" FormName="delete" Enhance>
        <button type="submit" class="btn btn-danger" disabled="@(review is null)">Delete</button> |
        <a href="/reviews">Back to List</a>
    </EditForm>
    }
</div>

@code {
private Review? review;

[SupplyParameterFromQuery]
private Guid ReviewId { get; set; }

protected override async Task OnInitializedAsync()
{
using var context = DbFactory.CreateDbContext();
review = await context.Reviews.FirstOrDefaultAsync(m => m.ReviewId == ReviewId);

if (review is null)
{
NavigationManager.NavigateTo("notfound");
}
}

private async Task DeleteReview()
{
using var context = DbFactory.CreateDbContext();
context.Reviews.Remove(review!);
await context.SaveChangesAsync();
NavigationManager.NavigateTo("/reviews");
}
}
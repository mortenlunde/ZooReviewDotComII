@page "/reviews/delete"
@attribute [Authorize]
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Delete</PageTitle>

<h1>Delete Review</h1>

<p>Are you sure you want to delete this?</p>

<div>
    <h2>Review</h2>
    <hr />
    @if (_review is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@_review.Username</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@_review.Rating</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Content</dt>
            <dd class="col-sm-10">@_review.Content</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date Reviewed</dt>
            <dd class="col-sm-10">@_review.DateReviewed</dd>
        </dl>
        <EditForm method="post" Model="_review" OnValidSubmit="DeleteReview" FormName="delete">
            <button type="submit" class="btn btn-danger" disabled="@(_review is null)">Delete</button> |
            <a href="/reviews">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Review? _review;
    private bool _isAuthorizedToDelete;

    [SupplyParameterFromQuery]
    private Guid ReviewId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using ApplicationDbContext context = DbFactory.CreateDbContext();
        _review = await context.Reviews.FirstOrDefaultAsync(m => m.ReviewId == ReviewId);

        if (_review is null)
        {
            NavigationManager.NavigateTo("/error");
            return;
        }

        await CheckUserPermissions();
    }

    private async Task CheckUserPermissions()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            ApplicationUser? appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                // Check if the logged-in user is the creator of the review or has the 'Admin' role
                _isAuthorizedToDelete = _review!.Username == appUser.UserName || user.IsInRole("Admin");

                if (!_isAuthorizedToDelete)
                {
                    // If the logged-in user is not the creator or an admin, redirect to "notfound"
                    NavigationManager.NavigateTo("Account/InvalidUser");
                }
            }
        }
        else
        {
            // If user is not authenticated, redirect to the login page
            NavigationManager.NavigateTo("Identity/Account/Login");
        }
    }

    private async Task DeleteReview()
    {
        if (_isAuthorizedToDelete && _review != null)
        {
            await using ApplicationDbContext context = DbFactory.CreateDbContext();
            context.Reviews.Remove(_review);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/reviews");
        }
    }
}

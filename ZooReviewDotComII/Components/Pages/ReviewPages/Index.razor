@page "/reviews"
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@implements IAsyncDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Reviews</h1>

<p>
    <a href="reviews/create">Create New</a>
</p>

<div>
    <label for="pageSize">Reviews per page: </label>
    <select id="pageSize" @onchange="OnPageSizeChanged" value="@pageSize">
        <option value="5">5</option>
        <option value="25">25</option>
        <option value="50">50</option>
    </select>
</div>

<QuickGrid Class="table" Items="_reviewsQuery">
    <PropertyColumn Property="review => review.ZooName" />
    <PropertyColumn Property="review => review.Username" />
    <PropertyColumn Property="review => review.Rating" />
    <PropertyColumn Property="review => review.Content" />
    <PropertyColumn Property="review => review.DateReviewed" />

    <TemplateColumn Context="review">
        <a href="@($"reviews/edit?reviewid={review.ReviewId}")">Edit</a> |
        <a href="@($"reviews/details?reviewid={review.ReviewId}")">Details</a> |
        <a href="@($"reviews/delete?reviewid={review.ReviewId}")">Delete</a>
        <span>@review.Rating</span> <!-- Display the numerical rating -->
        <span>@string.Join(" ", Enumerable.Repeat("★", (int)review.Rating))</span> <!-- Display stars -->
    </TemplateColumn>
</QuickGrid>

<div class="">
    <button class="btn btn-primary mx-2" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">
        <i class="bi bi-arrow-left-circle"></i> Previous
    </button>
    <span class="align-self-center">Page @currentPage of @totalPages</span>
    <button class="btn btn-primary mx-2" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">
        Next <i class="bi bi-arrow-right-circle"></i>
    </button>
</div>

@code {
private ApplicationDbContext _context = default!;
private IQueryable<Review> _reviewsQuery = default!;
private int pageSize = 5; // Default page size
private int currentPage = 1;
private int totalPages = 1;

protected override async Task OnInitializedAsync()
{
_context = await DbFactory.CreateDbContextAsync();
await LoadReviews();
}

// Method to handle page size change
private async Task OnPageSizeChanged(ChangeEventArgs e)
{
pageSize = int.Parse(e.Value.ToString()!);
currentPage = 1; // Reset to the first page when the page size changes
await LoadReviews();
}

// Method to load reviews with pagination
private async Task LoadReviews()
{
var totalReviews = await _context.Reviews.CountAsync();
totalPages = (int)Math.Ceiling(totalReviews / (double)pageSize);

_reviewsQuery = _context.Reviews
.Include(r => r.Zoo)
.Skip((currentPage - 1) * pageSize) // Skip records for previous pages
.Take(pageSize); // Take the pageSize number of reviews

StateHasChanged(); // Ensure the component is re-rendered after data load
}

// Go to the previous page
private async Task GoToPreviousPage()
{
if (currentPage > 1)
{
currentPage--;
await LoadReviews();
}
}

// Go to the next page
private async Task GoToNextPage()
{
if (currentPage < totalPages)
{
currentPage++;
await LoadReviews();
}
}

// Check if we can go to the previous page
private bool CanGoToPreviousPage => currentPage > 1;

// Check if we can go to the next page
private bool CanGoToNextPage => currentPage < totalPages;

public async ValueTask DisposeAsync() => await _context.DisposeAsync();
}

@page "/reviews"
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@implements IAsyncDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Reviews</h1>

<div>
    <label for="pageSize">Reviews per page: </label>
    <select id="pageSize" @onchange="OnPageSizeChanged" value="@_pageSize">
        <option value="5">5</option>
        <option value="25">25</option>
        <option value="50">50</option>
    </select>
</div>

<!-- Single Sorting Dropdown (Sort By Column and Order) -->
<div class="sorting-dropdown">
    <label for="sortBy">Sort By: </label>
    <select id="sortBy" @onchange="OnSortChanged">
        <option value="DateReviewed-true" selected>Date Reviewed (Ascending)</option>
        <option value="DateReviewed-false">Date Reviewed (Descending)</option>
        <option value="ZooName-true">Zoo Name (Ascending)</option>
        <option value="ZooName-false">Zoo Name (Descending)</option>
        <option value="Username-true">Username (Ascending)</option>
        <option value="Username-false">Username (Descending)</option>
        <option value="Rating-true">Rating (Ascending)</option>
        <option value="Rating-false">Rating (Descending)</option>
    </select>
</div>

<QuickGrid Class="table" Items="_reviewsQuery">
    <PropertyColumn Property="review => review.ZooName" />
    <PropertyColumn Property="review => review.Username" />
    <PropertyColumn Property="review => review.Rating" />
    <PropertyColumn Property="review => Truncate(review.Content, 100)" />  <!-- Truncate content to 100 characters -->
    <PropertyColumn Property="review => review.DateReviewed" />
    <TemplateColumn Context="review">
        <a href="@($"reviews/details?reviewid={review.ReviewId}")">Details</a>
    </TemplateColumn>
</QuickGrid>

<div class="mb-3">
    <button class="btn btn-primary mx-2" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">
        <i class="bi bi-arrow-left-circle"></i> Previous
    </button>
    <span class="align-self-center">Page @_currentPage of @_totalPages</span>
    <button class="btn btn-primary mx-2" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">
        Next <i class="bi bi-arrow-right-circle"></i>
    </button>
</div>

@code {
    private ApplicationDbContext _context = default!;
    private IQueryable<Review> _reviewsQuery = default!;

    private int _pageSize = 5;
    private int _currentPage = 1;
    private int _totalPages = 1;
    private string _sortColumn = "DateReviewed";  // Default column for sorting (DateReviewed)
    private bool _sortDescending = true; // Default sort order (Ascending = true)

    protected override async Task OnInitializedAsync()
    {
        _context = await DbFactory.CreateDbContextAsync();
        await LoadReviews();
    }

    // Method to handle page size change
    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        _pageSize = int.Parse(e.Value!.ToString()!);
        _currentPage = 1; // Reset to the first page when the page size changes
        await LoadReviews();
    }

    // Method to handle sorting (column and order)
    private async Task OnSortChanged(ChangeEventArgs e)
    {
        string value = e.Value!.ToString()!;
        string[] parts = value.Split('-');
        _sortColumn = parts[0];
        _sortDescending = bool.Parse(parts[1]);
        await LoadReviews();
    }

    // Method to load reviews with pagination and sorting
    private async Task LoadReviews()
    {
        int totalReviews = await _context.Reviews.CountAsync();
        _totalPages = (int)Math.Ceiling(totalReviews / (double)_pageSize);

        // Apply sorting
        IQueryable<Review> query = _context.Reviews.Include(r => r.Zoo).AsQueryable();

        // Apply dynamic sorting based on the selected column and order
        query = _sortColumn switch
        {
            "ZooName" => _sortDescending ? query.OrderByDescending(r => r.Zoo!.Name) : query.OrderBy(r => r.Zoo!.Name),
            "Username" => _sortDescending ? query.OrderByDescending(r => r.Username) : query.OrderBy(r => r.Username),
            "Rating" => _sortDescending ? query.OrderByDescending(r => r.Rating) : query.OrderBy(r => r.Rating),
            "DateReviewed" => _sortDescending ? query.OrderByDescending(r => r.DateReviewed) : query.OrderBy(r => r.DateReviewed),
            _ => query.OrderByDescending(r => r.DateReviewed) // Default fallback to DateReviewed descending
        };

        // Apply pagination (Skip and Take)
        _reviewsQuery = query.Skip((_currentPage - 1) * _pageSize).Take(_pageSize);

        StateHasChanged(); // Ensure the component is re-rendered after data load
    }

    // Truncate long descriptions
    private string? Truncate(string? content, int maxLength)
    {
        if (string.IsNullOrEmpty(content)) return content;
        return content.Length <= maxLength ? content : content.Substring(0, maxLength) + "...";
    }

    // Go to the previous page
    private async Task GoToPreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadReviews();
        }
    }

    // Go to the next page
    private async Task GoToNextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadReviews();
        }
    }

    // Check if we can go to the previous page
    private bool CanGoToPreviousPage => _currentPage > 1;

    // Check if we can go to the next page
    private bool CanGoToNextPage => _currentPage < _totalPages;

    public async ValueTask DisposeAsync() => await _context.DisposeAsync();
}

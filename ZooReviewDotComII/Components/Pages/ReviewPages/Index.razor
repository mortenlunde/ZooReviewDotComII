@page "/reviews"
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@using SortDirection = BlazorBootstrap.SortDirection
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<h1>Reviews</h1>
<br/>
<Grid TItem="Review"
      Class="table table-hover table-bordered table-striped"
      DataProvider="CustomersDataProvider"
      AllowPaging="true"
      AllowSorting="true"
      Responsive="true"
      Style="background: rgba(255,255,255,0.5)">

    <GridColumn TItem="Review" HeaderText="Zoo Name" PropertyName="ZooName" SortString="ZooName" SortKeySelector="item => item.ZooName" FilterTextboxWidth="100">
        <a href="/zoos/details?zooid=@context.ZooId">@context.ZooName</a>
    </GridColumn>
    <GridColumn TItem="Review" HeaderText="Username" PropertyName="Username" SortString="Username" SortKeySelector="item => item.Username" FilterTextboxWidth="80">
        @context.Username
    </GridColumn>
    <GridColumn TItem="Review" HeaderText="Rating" PropertyName="Rating" SortString="Rating" SortKeySelector="item => item.Rating" FilterTextboxWidth="50" TextAlignment="Alignment.Center">
        @context.Rating
    </GridColumn>
    <GridColumn TItem="Review" HeaderText="Comment" PropertyName="Comment" SortString="Comment" SortKeySelector="item => item.Content" FilterTextboxWidth="150">
        <a href="/reviews/details?reviewid=@context.ReviewId">@TruncateComment(context.Content)</a>
    </GridColumn>

    <GridColumn TItem="Review" HeaderText="Date Reviewed" PropertyName="DateReviewed" SortString="DateReviewed" SortKeySelector="item => item.DateReviewed" FilterTextboxWidth="150">
        @context.DateReviewed
    </GridColumn>
</Grid>

@code {
    private IQueryable<Review> _reviewsQuery = default!;

    protected override async Task OnInitializedAsync()
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        _reviewsQuery = dbContext.Reviews.Include(r => r.Zoo).AsQueryable();
    }

    private async Task<GridDataProviderResult<Review>> CustomersDataProvider(GridDataProviderRequest<Review> request)
    {
        // Handle sorting
        var query = _reviewsQuery;
        
        if (request.Sorting is not null && request.Sorting.Any())
        {
            var sort = request.Sorting.First();
            query = sort.SortDirection == SortDirection.Ascending
                ? query.OrderBy(sort.SortKeySelector)
                : query.OrderByDescending(sort.SortKeySelector);
        }

        // Apply filters
        if (request.Filters is not null && request.Filters.Any())
        {
            foreach (var filter in request.Filters)
            {
                // Apply your filtering logic here, possibly using a library like Linq.Dynamic.Core for dynamic filters
            }
        }

        // Pagination
        var totalItems = await query.CountAsync();
        var data = await query
            .Skip((request.PageNumber - 1) * request.PageSize)
            .Take(request.PageSize)
            .ToListAsync();

        return new GridDataProviderResult<Review> { Data = data, TotalCount = totalItems };
    }
    
    private string TruncateComment(string comment)
    {
        if (string.IsNullOrEmpty(comment)) return string.Empty;

        return comment.Length > 150 ? comment.Substring(0, 150) + "..." : comment;
    }
}

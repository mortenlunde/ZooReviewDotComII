@page "/reviews/details"
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Review</h2>
    <hr />
    @if (_review is null)
    {
    <p><em>Loading...</em></p>
    }
    else
    {
    <dl class="row">
        <dt class="col-sm-2">UserId</dt>
        <dd class="col-sm-10">@_review.Username</dd>
        <dt class="col-sm-2">Rating</dt>
        <dd class="col-sm-10">@RenderStars(_review.Rating)</dd>
        <dt class="col-sm-2">Content</dt>
        <dd class="col-sm-10">@_review.Content</dd>
        <dt class="col-sm-2">DateReviewed</dt>
        <dd class="col-sm-10">@_review.DateReviewed</dd>
    </dl>

    <div>
        <!-- Edit Button (Only for the User who created the review) -->
        @if (_isCurrentUserReview)
        {
        <a href="@($"/reviews/edit?reviewid={_review.ReviewId}")" class="btn btn-success mx-2">Edit</a>
        }

        <!-- Delete Button (Only for Admin users) -->
        @if (_isAdmin || _isCurrentUserReview)
        {
        <a href="@($"/reviews/delete?reviewid={_review.ReviewId}")" class="btn btn-danger mx-2">Delete</a>
        }

        <!-- Back to List Button -->
        <a href="@($"/reviews")" class="btn btn-primary mx-2">Back to List</a>
    </div>
    }
</div>

@code {
    private Review? _review;
    private bool _isCurrentUserReview;
    private bool _isAdmin;

    [SupplyParameterFromQuery]
    private Guid ReviewId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using ApplicationDbContext context = await DbFactory.CreateDbContextAsync();
        _review = await context.Reviews.FirstOrDefaultAsync(m => m.ReviewId == ReviewId);

        if (_review is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        await CheckUserPermissions();
    }
    
    private static string RenderStars(double avgRating)
    {
        int fullStars = (int)avgRating;
        bool halfStar = avgRating - fullStars >= 0.5;
        int emptyStars = 5 - fullStars - (halfStar ? 1 : 0);

        string starsHtml = new string('★', fullStars);
        if (halfStar) starsHtml += "☆";
        starsHtml += new string('☆', emptyStars);

        return starsHtml;
    }

    private async Task CheckUserPermissions()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            ApplicationUser? appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                // Check if the logged-in user is the one who created the review
                _isCurrentUserReview = _review?.Username == appUser.UserName;

                // Check if the user is an Admin
                _isAdmin = await UserManager.IsInRoleAsync(appUser, "Admin");
            }
        }
    }
}

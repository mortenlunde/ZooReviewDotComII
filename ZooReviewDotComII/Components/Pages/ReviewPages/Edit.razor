@page "/reviews/edit"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Edit Review</PageTitle>

<h1>Edit Review</h1>

@if (Review is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Review" OnValidSubmit="UpdateReview">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Rating -->
                <div class="mb-3">
                    <label for="rating" class="form-label">Rating:</label>
                    <InputNumber id="rating" @bind-Value="Review.Rating" class="form-control" />
                    <ValidationMessage For="() => Review.Rating" class="text-danger" />
                </div>

                <!-- Content -->
                <div class="mb-3">
                    <label for="content" class="form-label">Comment:</label>
                    <InputTextArea id="content" @bind-Value="Review.Content" class="form-control" />
                    <ValidationMessage For="() => Review.Content" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/reviews">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private Guid ReviewId { get; set; }

    private Review? Review { get; set; }
    private bool _isCurrentUserReview;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the review from the database
        using var context = DbFactory.CreateDbContext();
        Review = await context.Reviews.FirstOrDefaultAsync(m => m.ReviewId == ReviewId);

        if (Review is null)
        {
            NavigationManager.NavigateTo("/error");
            return;
        }

        await CheckUserPermissions();
    }

    private async Task CheckUserPermissions()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                // Check if the logged-in user is the same as the one who created the review
                _isCurrentUserReview = Review!.Username == appUser.UserName;

                if (!_isCurrentUserReview)
                {
                    // If the logged-in user is not the one who created the review, redirect to "notfound"
                    NavigationManager.NavigateTo("Account/InvalidUser");
                }
            }
        }
    }

    private async Task UpdateReview()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Review!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ReviewExists(Review!.ReviewId))
            {
                NavigationManager.NavigateTo("/error");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/reviews");
    }

    private bool ReviewExists(Guid reviewid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Reviews.Any(e => e.ReviewId == reviewid);
    }
}

@page "/zoos/create"
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Zoo</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Zoo" OnValidSubmit="AddZoo" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Zoo.Name" class="form-control" /> 
                <ValidationMessage For="() => Zoo.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="town" class="form-label">Town:</label> 
                <InputText id="town" @bind-Value="Zoo.Town" class="form-control" /> 
                <ValidationMessage For="() => Zoo.Town" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/zoos">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Zoo Zoo { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddZoo()
    {
        using var context = DbFactory.CreateDbContext();
        context.Zoos.Add(Zoo);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/zoos");
    }
}

@page "/zoos"
@attribute [AllowAnonymous]
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Data
@using ZooReviewDotComII.Models
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> Usermanager

<PageTitle>Index</PageTitle>

<h1>Zoos</h1>

<p>
    @if (_isAdmin)
    {
        <Button Type="ButtonType.Link" Color="ButtonColor.Success" To="zoos/create"> Create new </Button>
    }
</p>

@if (_zoos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
        @foreach (var zoo in _zoos)
        {
            <div class="col">
                <Card Class="mb-4 h-100" Style="width: 100%;">
                    @if (zoo.Image != null && zoo.Image.Length > 0)
                    {
                    <img style="max-height: 200px; max-width: 100%;" src="data:image/jpeg;base64,@Convert.ToBase64String(zoo.Image)" alt="Zoo Image" class="img-fluid" />
                    }
                    else
                    {
                    <Image style="max-height: 200px; max-width: 100%;" Src="/images/placeholder.png" IsThumbnail="true" Alt="placeholder" />
                    }
                    <CardBody>
                        <CardTitle>@zoo.Name</CardTitle>
                        <CardText>@zoo.Town</CardText>
                        <CardText>Average Rating: @GetRatingStars(zoo.AvgRating)</CardText>

                    </CardBody>
                    <CardFooter>
                        <a href="@($"reviews/create?zooId={zoo.ZooId}")">Create a review</a> |
                        <a href="@($"zoos/details?zooid={zoo.ZooId}")">Visit</a>
                        @if (_isAdmin)
                        {
                            <text> | </text>
                            <a href="@($"zoos/edit?zooid={zoo.ZooId}")">Edit</a>
                            <text> | </text>
                            <a href="@($"zoos/delete?zooid={zoo.ZooId}")">Delete</a>
                        }
                    </CardFooter>
                </Card>
            </div>
        }
    </div>
}

@code {
    private ApplicationDbContext _context = default!;
    private List<Zoo> _zoos = [];
    private bool _isAdmin;

    protected override async Task OnInitializedAsync()
    {
        _context = await DbFactory.CreateDbContextAsync();
        await CheckIfUserIsAdminAsync();
        await LoadZoosAsync();
    }

    private async Task LoadZoosAsync()
    {
        _zoos = await _context.Zoos.ToListAsync();
    }

    private async Task CheckIfUserIsAdminAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            var appUser = await Usermanager.GetUserAsync(user);
            if (appUser != null)
            {
                _isAdmin = await Usermanager.IsInRoleAsync(appUser, "Admin");
            }
        }
    }

    private static string GetRatingStars(double avgRating)
    {
        int fullStars = (int)avgRating;
        bool hasHalfStar = (avgRating - fullStars) >= 0.5;
        const int totalStars = 5;

        string stars = new string('⭐', fullStars);
        if (hasHalfStar) stars += "⭐️";
        stars = stars.PadRight(totalStars, '☆');

        return stars;
    }
}
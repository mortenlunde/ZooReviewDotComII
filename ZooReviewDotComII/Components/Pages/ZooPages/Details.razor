@page "/zoos/details"
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> Usermanager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Zoo</h2>
    <hr />
    @if (zoo is null)
    {
    <p><em>Loading...</em></p>
    }
    else
    {
    <div class="row">
        <!-- Image Column -->
        <div class="col-md-4">
            @if (zoo.Image != null && zoo.Image.Length > 0)
            {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(zoo.Image)" alt="Zoo Image" class="img-fluid" />
            }
            else
            {
            <Image Src="/images/placeholder.png" IsThumbnail="true" Alt="placeholder" />
            }
        </div>

        <!-- Details Column -->
        <div class="col-md-8">
            <dl class="row">
                <dt class="col-sm-3">ID</dt>
                <dd class="col-sm-9">@zoo.ZooId</dd>
                <dt class="col-sm-3">Name</dt>
                <dd class="col-sm-9">@zoo.Name</dd>
                <dt class="col-sm-3">Town</dt>
                <dd class="col-sm-9">@zoo.Town</dd>
                <dt class="col-sm-3">Avg Rating</dt>
                <dd class="col-sm-9">@RenderStars(zoo.AvgRating)</dd>
            </dl>
            <div>
                @if (isAdmin)
                {
                <a href="@($"/zoos/edit?zooid={zoo.ZooId}")">Edit</a>
                <text> | </text>
                <a href="@($"/zoos/delete?ZooId={zoo.ZooId}")">Delete</a>
                }
                | <a href="@($"/zoos")">Back to List</a>
            </div>
        </div>
    </div>
    <br/>
    }

    <!-- Reviews Section -->
    <h3>Reviews</h3>
    @if (reviews != null && reviews.Any())
    {
    <ul class="list-group">
        @foreach (var review in reviews)
        {
        <li class="list-group-item">
            <strong>@review.Rating</strong> Stars
            <p>
                @if (expandedReviews.Contains(review.ReviewId.ToString()))
                {
                <!-- Show the full content if expanded -->
                @((MarkupString)review.Content)
                }
                else
                {
                <!-- Truncate content to 150 characters if not expanded -->
                @((MarkupString)(review.Content.Length > 150 ? review.Content.Substring(0, 150) + "..." : review.Content))
                }
            </p>
            <footer class="blockquote-footer">@review.Username on @review.DateReviewed.ToShortDateString()</footer>

            @if (!expandedReviews.Contains(review.ReviewId.ToString()) && review.Content.Length > 150)
            {
            <button @onclick="() => ShowFullReview(review)" class="btn btn-link btn-sm">Expand</button>
            }
            @if (expandedReviews.Contains(review.ReviewId.ToString()) && review.Content.Length > 150)
            {
            <button @onclick="() => ShowFullReview(review)" class="btn btn-link btn-sm">Collapse</button>
            }
        </li>
        }
    </ul>
    }
    else
    {
    <p>No reviews available for this zoo.</p>
    }
</div>

@code {
private Zoo? zoo;
private List<Review> reviews = new();
private bool isAdmin = false;

// Keep track of expanded reviews by their ReviewId
private HashSet<string> expandedReviews = new();

[SupplyParameterFromQuery]
private Guid ZooId { get; set; }

protected override async Task OnInitializedAsync()
{
using var context = DbFactory.CreateDbContext();
zoo = await context.Zoos.FirstOrDefaultAsync(m => m.ZooId == ZooId);

await CheckIfUserIsAdminAsync();

if (zoo is null)
{
NavigationManager.NavigateTo("notfound");
}

reviews = await context.Reviews
.Where(r => r.ZooId == ZooId)
.OrderByDescending(r => r.DateReviewed) // Optional: Sort by review date (latest first)
.ToListAsync();
}

// Toggles the expanded state of the review
private void ShowFullReview(Review review)
{
if (expandedReviews.Contains(review.ReviewId.ToString()))
{
// If already expanded, collapse it
expandedReviews.Remove(review.ReviewId.ToString());
}
else
{
// Otherwise, expand it
expandedReviews.Add(review.ReviewId.ToString());
}
}

private string RenderStars(double avgRating)
{
    int fullStars = (int)avgRating; // Number of full stars
    bool halfStar = avgRating - fullStars >= 0.5; // Determine if a half star is needed
    int emptyStars = 5 - fullStars - (halfStar ? 1 : 0); // Calculate remaining empty stars

    string starsHtml = new string('★', fullStars); // Full stars
    if (halfStar) starsHtml += "☆"; // Half star, if needed
    starsHtml += new string('☆', emptyStars); // Empty stars

    return starsHtml;
}

private async Task CheckIfUserIsAdminAsync()
{
var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
var user = authState.User;
if (user.Identity?.IsAuthenticated ?? false)
{
var appUser = await Usermanager.GetUserAsync(user);
if (appUser != null)
{
isAdmin = await Usermanager.IsInRoleAsync(appUser, "Admin");
}
}
}
}

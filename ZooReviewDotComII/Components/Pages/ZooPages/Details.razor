@page "/zoos/details"
@attribute [AllowAnonymous]
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> Usermanager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Zoo</h2>
    <hr />
    @if (_zoo is null)
    {
    <p><em>Loading...</em></p>
    }
    else
    {
    <div class="row">
        <!-- Image Column -->
        <div class="col-md-4">
            @if (_zoo.Image is { Length: > 0 })
            {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(_zoo.Image)" alt="Zoo Image" class="img-fluid" />
            }
            else
            {
            <Image Src="/images/placeholder.png" IsThumbnail="true" Alt="placeholder" />
            }
        </div>

        <!-- Details Column -->
        <div class="col-md-8">
            <dl class="row">
                <dt class="col-sm-3">ID</dt>
                <dd class="col-sm-9">@_zoo.ZooId</dd>
                <dt class="col-sm-3">Name</dt>
                <dd class="col-sm-9">@_zoo.Name</dd>
                <dt class="col-sm-3">Town</dt>
                <dd class="col-sm-9">@_zoo.Town</dd>
                <dt class="col-sm-3">Avg Rating</dt>
                <dd class="col-sm-9">@RenderStars(_zoo.AvgRating)</dd>
            </dl>
            <div>
                @if (_isAdmin)
                {
                <a href="@($"/zoos/edit?zooid={_zoo.ZooId}")">Edit</a>
                <text> | </text>
                <a href="@($"/zoos/delete?ZooId={_zoo.ZooId}")">Delete</a>
                }
                | <a href="@($"/zoos")">Back to List</a>
            </div>
        </div>
    </div>
    <br/>
    }

    <!-- Reviews Section -->
    <h3>Reviews</h3>
    @if (_reviews.Any())
    {
    <ul class="list-group">
        @foreach (Review review in _reviews)
        {
        <li class="list-group-item">
            <strong>@RenderStars(_zoo!.AvgRating)</strong>
            <p>
                @if (_expandedReviews.Contains(review.ReviewId.ToString()))
                {
                <!-- Show the full content if expanded -->
                @((MarkupString)review.Content!)
                }
                else
                {
                <!-- Truncate content to 150 characters if not expanded -->
                @((MarkupString)(review.Content!.Length > 150 ? review.Content.Substring(0, 150) + "..." : review.Content))
                }
            </p>
            <footer class="blockquote-footer">@review.Username on @review.DateReviewed.ToShortDateString()</footer>

            @if (!_expandedReviews.Contains(review.ReviewId.ToString()) && review.Content!.Length > 150)
            {
            <button @onclick="() => ShowFullReview(review)" class="btn btn-link btn-sm">Expand</button>
            }
            @if (_expandedReviews.Contains(review.ReviewId.ToString()) && review.Content!.Length > 150)
            {
            <button @onclick="() => ShowFullReview(review)" class="btn btn-link btn-sm">Collapse</button>
            }
        </li>
        }
    </ul>
    }
    else
    {
    <p>No reviews available for this zoo.</p>
    }
</div>

@code {
    private Zoo? _zoo;
    private List<Review> _reviews = [];
    private bool _isAdmin;
    private readonly HashSet<string> _expandedReviews = [];

    [SupplyParameterFromQuery]
    private Guid ZooId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using ApplicationDbContext context = DbFactory.CreateDbContext();
        _zoo = await context.Zoos.FirstOrDefaultAsync(m => m.ZooId == ZooId);

        await CheckIfUserIsAdminAsync();

        if (_zoo is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        _reviews = await context.Reviews
            .Where(r => r.ZooId == ZooId)
                .OrderByDescending(r => r.DateReviewed)
                .ToListAsync();
    }

        // Toggles the expanded state of the review
    private void ShowFullReview(Review review)
    {
        if (_expandedReviews.Contains(review.ReviewId.ToString()))
        {
            _expandedReviews.Remove(review.ReviewId.ToString());
        }
        else
        {
            _expandedReviews.Add(review.ReviewId.ToString());
        }
    }      

    private static string RenderStars(double avgRating)
    {
        int fullStars = (int)avgRating;
        bool halfStar = avgRating - fullStars >= 0.5;
        int emptyStars = 5 - fullStars - (halfStar ? 1 : 0);

        string starsHtml = new string('★', fullStars);
        if (halfStar) starsHtml += "☆";
        starsHtml += new string('☆', emptyStars);

        return starsHtml;
    }

    private async Task CheckIfUserIsAdminAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            ApplicationUser? appUser = await Usermanager.GetUserAsync(user);
            if (appUser != null)
            {
                _isAdmin = await Usermanager.IsInRoleAsync(appUser, "Admin");
            }
        }
    }
}
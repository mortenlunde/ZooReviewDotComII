@page "/zoos/delete"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Zoo</h2>
    <hr />
    @if (zoo is null)
    {
    <p><em>Loading...</em></p>
    }
    else {
    <dl class="row">
        <dt class="col-sm-2">Name</dt>
        <dd class="col-sm-10">@zoo.Name</dd>
    </dl>
    <dl class="row">
        <dt class="col-sm-2">Town</dt>
        <dd class="col-sm-10">@zoo.Town</dd>
    </dl>
    <dl class="row">
        <dt class="col-sm-2">AvgRating</dt>
        <dd class="col-sm-10">@zoo.AvgRating</dd>
    </dl>
    <EditForm method="post" Model="zoo" OnValidSubmit="DeleteZoo" FormName="delete" Enhance>
        <button type="submit" class="btn btn-danger" disabled="@(zoo is null)">Delete</button> |
        <a href="/zoos">Back to List</a>
    </EditForm>
    }
</div>

@code {
private Zoo? zoo;

[SupplyParameterFromQuery]
private Guid ZooId { get; set; }

protected override async Task OnInitializedAsync()
{
using var context = DbFactory.CreateDbContext();
zoo = await context.Zoos.FirstOrDefaultAsync(m => m.ZooId == ZooId);

if (zoo is null)
{
NavigationManager.NavigateTo("notfound");
}
}

private async Task DeleteZoo()
{
using var context = DbFactory.CreateDbContext();
context.Zoos.Remove(zoo!);
await context.SaveChangesAsync();
NavigationManager.NavigateTo("/zoos");
}
}
@page "/zoos/edit"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using ZooReviewDotComII.Models
@using ZooReviewDotComII.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Zoo</h2>
<hr />
@if (Zoo is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Zoo" OnValidSubmit="UpdateZoo" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Zoo.ZooId" value="@Zoo.ZooId" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Zoo.Name" class="form-control" />
                    <ValidationMessage For="() => Zoo.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="town" class="form-label">Town:</label>
                    <InputText id="town" @bind-Value="Zoo.Town" class="form-control" />
                    <ValidationMessage For="() => Zoo.Town" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="image" class="form-label">Upload Picture (max 10mb):</label>
                    <InputFile id="image" OnChange="OnInputFileChange" />
                    <ValidationMessage For="() => Zoo.Image" class="text-danger" />
                </div>
                <button type="button" class="btn btn-danger" @onclick="NavigateToDeletePage">Delete Zoo</button>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/zoos">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private Guid ZooId { get; set; }

    [SupplyParameterFromForm]
    private Zoo? Zoo { get; set; }
    
    private void NavigateToDeletePage()
    {
        NavigationManager.NavigateTo($"/zoos/delete?ZooId={Zoo.ZooId}");
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Zoo ??= await context.Zoos.FirstOrDefaultAsync(m => m.ZooId == ZooId);

        if (Zoo is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    
    private byte[]? uploadedImageData;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        const long maxFileSize = 10 * 1024 * 1024; // 10 MB

        if (file != null && file.Size <= maxFileSize)
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxFileSize).CopyToAsync(memoryStream);
            uploadedImageData = memoryStream.ToArray();
        }
        else
        {
            Console.WriteLine("File size exceeds the 10 MB limit.");
        }
    }



    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateZoo()
    {
        
        using var context = DbFactory.CreateDbContext();
        if (Zoo != null)
        {
            if (uploadedImageData != null)
            {
                Zoo.Image = uploadedImageData;
            }
            context.Attach(Zoo!).State = EntityState.Modified;

            try
            {
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ZooExists(Zoo!.ZooId))
                {
                    NavigationManager.NavigateTo("notfound");
                }
                else
                {
                    throw;
                }
            }
        }

        NavigationManager.NavigateTo("/zoos");
    }

    private bool ZooExists(Guid zooid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Zoos.Any(e => e.ZooId == zooid);
    }
}
@implements IDisposable

@inject NavigationManager NavigationManager
<nav class="navbar navbar-expand-md navbar-dark bg-dark mb-4">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ZooReviewDotCom</a>
        <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
            <ul class="navbar-nav ms-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill" aria-hidden="true"></span> Home
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="zoos">
                        <span class="bi-journals" aria-hidden="true"></span> Zoos
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="reviews">
                        <span class="bi-stars" aria-hidden="true"></span> Reviews
                    </NavLink>
                </li>
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick:stopPropagation>
                                <span class="bi-person-lines-fill" aria-hidden="true"></span> @context.User.Identity?.Name
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                                <li>
                                    <NavLink class="dropdown-item" href="Account/Manage">
                                        <span class="bi-pen" aria-hidden="true"></span> Manage Account
                                    </NavLink>
                                </li>
                                <li>
                                    <form action="Account/Logout" method="post" class="m-0">
                                        <AntiforgeryToken />
                                        <input type="hidden" name="ReturnUrl" value="@_currentUrl" />
                                        <button type="submit" class="dropdown-item">
                                            <span class="bi-box-arrow-left" aria-hidden="true"></span> Logout
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </li>
                    </Authorized>
                    <NotAuthorized>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Register">
                                <span class="bi-person-fill-add" aria-hidden="true"></span> Register
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Login">
                                <span class="bi-person-fill" aria-hidden="true"></span> Login
                            </NavLink>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
            </ul>
        </div>
    </div>
</nav>

@code {
private string? _currentUrl;
private bool collapseNavMenu = true;
private string? NavBarCssClass => collapseNavMenu ? null : "show";
private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;

protected override void OnInitialized()
{
_currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
NavigationManager.LocationChanged += OnLocationChanged;
}

private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
{
_currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
StateHasChanged();
}

public void Dispose()
{
NavigationManager.LocationChanged -= OnLocationChanged;
}
private void ToggleNavMenu()
{
collapseNavMenu = !collapseNavMenu;
}
}
